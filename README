simple_spheres
**************

    A very basic, fairly fast
    multithreaded raytracer written in C.
    
    I'm using it mainly as a demo and testbed.
    
    It can render the canonical shiny balls -- eight of them,
    bouncing around in an invisible box, with two point
    light sources and a trace depth of two (ie you can see
    reflections of reflections) -- at 45fps in my little VM
    running on my laptop at VGA resolution. It cheats 
    egregiously to make this possible, starting by rasterizing
    the spheres very crudely into a stencil buffer, and then
    only tracing rays in places where the stencil buffer is
    set.

    In the future, I want to experiment with a more general form
    of this: I want to use OpenGL to render a scene up the the
    fragment stage, and then go through the fragments, tracing 
    secondary rays from only the (usually small) subset that are
    highly specular. I am wondering whether this can be implemented
    directly on the GPU as a shader. 
    
    Simple_spheres is fairly badass.



    UPDATED: I've now added a very similar but even more simplified 
    raytracer in Haskell, for comparison. Haskell is a beautiful
    language, so it's sad that even with all the voodoo black magic
    that GHC can work, it is still at least two orders of magnitude
    slower than C. And that for a simple (a couple hundred lines in 
    both languages) program that is mostly just math. (In other words,
    the kind of thing even Java can do reasonably quickly. If I have
    time, I will in fact port the C code to Java because I'm quite
    curious now.)
    
    Pros:
    The entire rendering is a single pure function, which is pretty cool.
    In theory this makes the individual ray casts trivially parallelizable.
    
    Cons:
    Even with the cool parts like antialiasing, collision detection, and
    multiple lightsources disabled and the trace depth reduced to 1 at
    320x240 (ie extremely limited settings), roughly 1 FPS.

